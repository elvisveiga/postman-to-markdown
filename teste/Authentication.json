{
	"info": {
		"_postman_id": "f669a9b0-4124-4f90-b815-b1fc1f94a74e",
		"name": "ePharma.Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "OAuth",
					"item": [
						{
							"name": "Autentica Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"token\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"password\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"client_id\", \"42A69F1C06B2D7B0F861B16BE9231BAA\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "username",
										"value": "{{username}}"
									},
									{
										"key": "password",
										"value": "{{password}}"
									},
									{
										"key": "client_id",
										"value": "{{client_id}}"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/Authenticate",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"Authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable('Id_Usuario', data.data.id);\r",
											"postman.setEnvironmentVariable('login_Usuario', data.data.login);\r",
											"postman.setEnvironmentVariable('password_Usuario', data.data.password);\r",
											"postman.setEnvironmentVariable('email_Usuario', data.data.email);\r",
											"postman.setEnvironmentVariable('cpf_Usuario', data.data.cpf);\r",
											"\r",
											"\r",
											"postman.setEnvironmentVariable('Id_permissions', data.data.permissions[0].id);\r",
											"postman.setEnvironmentVariable('typePermissionsAuthenticate', data.data.permissions[0].type);\r",
											"postman.setEnvironmentVariable('userId_permissions', data.data.permissions[0].userId);\r",
											"\r",
											"postman.setEnvironmentVariable('Id_securityKey', data.data.securityKey.id);\r",
											"postman.setEnvironmentVariable('key_securityKey', data.data.securityKey.key);\r",
											"\r",
											"postman.setEnvironmentVariable('Id_systems', data.data.systems[0].id);\r",
											"postman.setEnvironmentVariable('userId_systems', data.data.systems[0].userId);\r",
											"postman.setEnvironmentVariable('systemId_systems', data.data.systems[0].systemId);\r",
											"\r",
											"postman.setEnvironmentVariable('Id_system', data.data.systems[0].system.id);\r",
											"postman.setEnvironmentVariable('name_system', data.data.systems[0].system.name);\r",
											"postman.setEnvironmentVariable('token_system', data.data.systems[0].system.token);\r",
											"\r",
											"\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario}},\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"eph@2019\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"startDate\": \"{{timestamp}}\",\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": {{Id_systems}},\r\n        \"userId\": {{userId_systems}},\r\n        \"systemId\": {{systemId_systems}},\r\n        \"system\": {\r\n          \"id\": {{Id_system}},\r\n          \"name\": \"{{name_system}}\",\r\n          \"token\": \"{{token_system}}\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserPermission",
					"item": []
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "OAuth",
					"item": [
						{
							"name": "Autentica Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"token\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"password\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"client_id\", \"42A69F1C06B2D7B0F861B16BE9231BAA\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "username",
										"value": "{{username}}"
									},
									{
										"key": "password",
										"value": "{{password}}"
									},
									{
										"key": "client_id",
										"value": "{{client_id}}"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth/Authenticate",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth",
										"Authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable('Id_Usuario', data.data.id);\r",
											"postman.setEnvironmentVariable('Id_permissions', data.data.permissions[0].id);\r",
											"postman.setEnvironmentVariable('userId_permissions', data.data.permissions[0].userId);\r",
											"postman.setEnvironmentVariable('Id_securityKey', data.data.securityKey.id);\r",
											"postman.setEnvironmentVariable('key_securityKey', data.data.securityKey.key);\r",
											"\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"pm.environment.set('login', data.data.login);\r",
											"pm.environment.set('systemID', data.data.systems[0].system.token);\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario}},\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"eph@2019\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"mobilePhoneNumber\": \"11967556641\",\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"startDate\": \"{{timestamp}}\",\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": {{Id_systems}},\r\n        \"userId\": {{userId_systems}},\r\n        \"systemId\": {{systemId_systems}},\r\n        \"system\": {\r\n          \"id\": {{Id_system}},\r\n          \"name\": \"{{name_system}}\",\r\n          \"token\": \"{{token_system}}\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Retorna Dados do Usuario pelo Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ID\", \"1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/User/GetById/{{ID}}",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"User",
										"GetById",
										"{{ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retorna Dados do Usuario (Read)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ID\", \"1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/User/Read?gridParams={\"Page\":1,\"ItemsPerPage\":10,\"Filter\":[],\"Sorter\":[]}&userId=14816&format=3&filename=\"Bradesco\"&delimiter=;",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"User",
										"Read"
									],
									"query": [
										{
											"key": "gridParams",
											"value": "{\"Page\":1,\"ItemsPerPage\":10,\"Filter\":[],\"Sorter\":[]}"
										},
										{
											"key": "userId",
											"value": "14816"
										},
										{
											"key": "format",
											"value": "3"
										},
										{
											"key": "filename",
											"value": "\"Bradesco\""
										},
										{
											"key": "delimiter",
											"value": ";"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserPermission",
					"item": [
						{
							"name": "Retorna Permissoes do Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/UserPermission/{{userId_permissions}}/{{typePermissionsAuthenticate}}?system=-1",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"UserPermission",
										"{{userId_permissions}}",
										"{{typePermissionsAuthenticate}}"
									],
									"query": [
										{
											"key": "system",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}