{
	"info": {
		"_postman_id": "ff926090-b819-45d9-8c64-2d65c465b878",
		"name": "ePharma_Services.Authenticate_(Automacao)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Autenticar Usuario",
			"item": [
				{
					"name": "Autentica Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Teste de Retorno Status da API\r",
									"pm.test(\"StatusComunicação API\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable('Authenticate', data.data.token.accessToken);\r",
									"\r",
									"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
									"pm.test(\"ContainsCorpoBody\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"//Variavel para validar o  responseBody da API\r",
									"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
									" \r",
									"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
									"if (body.success != null){\r",
									"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
									"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
									"===true;});}\r",
									"tests[msg] =  body.success === true;    \r",
									"};\r",
									"\r",
									"//teste que verifica se os valores da chaves zipCode são 06160180\r",
									"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"username\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
									"pm.environment.set(\"password\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
									"pm.environment.set(\"client_id\", \"42A69F1C06B2D7B0F861B16BE9231BAA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}"
							},
							{
								"key": "password",
								"value": "{{password}}"
							},
							{
								"key": "client_id",
								"value": "{{client_id}}"
							},
							{
								"key": "",
								"value": ""
							}
						],
						"url": {
							"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/Authenticate",
							"host": [
								"{{LinkAmbiente}}"
							],
							"path": [
								"Authentication",
								"api",
								"v1",
								"OAuth",
								"Authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v1",
			"item": [
				{
					"name": "OAuth",
					"item": [
						{
							"name": "Autentica Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"token\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"password\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"client_id\", \"42A69F1C06B2D7B0F861B16BE9231BAA\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "username",
										"value": "{{username}}"
									},
									{
										"key": "password",
										"value": "{{password}}"
									},
									{
										"key": "client_id",
										"value": "{{client_id}}"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/Authenticate",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"Authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Autentica Usuario (Usuario e senha não cadastrado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Autenticação com dados não Cadastrados\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql(404);\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username_nao_cadastrado\", \"aa02e422-9edd-4557-8370-7e0318af2542\");\r",
											"pm.environment.set(\"password_nao_cadastrado\", \"aa02e422-9edd-4557-8370-7e0318af2542\");\r",
											"pm.environment.set(\"client_id_nao_cadastrado\", \"42A69F1C06B2D7B0F861B16BE9231HGT\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "username",
										"value": "{{username_nao_cadastrado}}"
									},
									{
										"key": "password",
										"value": "{{password_nao_cadastrado}}"
									},
									{
										"key": "client_id",
										"value": "{{client_id_nao_cadastrado}}"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/Authenticate",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"Authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Geração de CPF Generico Valido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var CPF = responseBody.toString();\r",
											"pm.environment.set('CPF_Generico', CPF);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "acao",
										"value": "pontuacao",
										"type": "text"
									},
									{
										"key": "pontuacao",
										"value": "N",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "acao",
											"value": "gerar_pessoa",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.4devs.com.br/ferramentas_online.php",
									"protocol": "https",
									"host": [
										"www",
										"4devs",
										"com",
										"br"
									],
									"path": [
										"ferramentas_online.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Senha Ultrapassando Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Senha Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Password' must be 50 characters or fewer. You entered 51 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"SenhaInvalida\", \"asdfasdfs2134214@#$%asdfasdfs2134214@#$%asdfasdfsg4\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"{{SenhaInvalida}}\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Login Ultrapassando Limite do campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Login Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Login' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"LoginInvalido\", \"asgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfaasgasfdfsadfas234124231412342@#$%¨&%asgjs\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{LoginInvalido}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Sem Autenticação)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Criação de Usuario sem Autenticação\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (CPF Invalido)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"CPF é inválido.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"CPF_Invalido\", \"07088154888\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Invalido}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Token de Sistema Invalido)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"Token_Invalido\", \"etgtIB0O610D57f6041A4064aC73bgrs\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"{{Token_Invalido}}\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Email Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Email Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Email' must be 100 characters or fewer. You entered 108 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"EmailInvalido\", \"testetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetesteteste@teste.com.br\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"{{EmailInvalido}}\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Nome Ultrapassando o Limite do campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Nome Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Name' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"NomeInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{NomeInvalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (lastName Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Last Name Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Last Name' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"LastNameInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"lastName\": \"{{LastNameInvalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (RG Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação RG Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'RG' must be 9 characters or fewer. You entered 11 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"RG_Invalido\", \"123456789-0\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"rg\": \"{{RG_Invalido}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressLine Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressLine Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Line' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressLine_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressLine\": \"{{AddressLine_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressZipCode Ultrapassando Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressZipCode Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Zip Code' must be 8 characters or fewer. You entered 9 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressZipCode_Invalido\", \"123456789\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"addressZipCode\": \"{{AddressZipCode_Invalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressZipCode Valor Menor que o Esperado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressZipCode Valor Menor que o Esperado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Zip Code' must be at least 8 characters. You entered 7 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressZipCode_Invalido\", \"1234567\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"addressZipCode\": \"{{AddressZipCode_Invalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressNeighborhood Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressNeighborhood Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Neighborhood' must be 150 characters or fewer. You entered 153 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressNeighborhood_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressNeighborhood\": \"{{AddressNeighborhood_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressComplement Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressComplement Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Complement' must be 150 characters or fewer. You entered 153 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressComplement_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressComplement\": \"{{AddressComplement_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressCity Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressCity Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address City' must be 150 characters or fewer. You entered 153 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressCity_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressCity\": \"{{AddressCity_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressState Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressState  Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address State' must be 2 characters or fewer. You entered 3 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressState_Invalido\", \"SSP\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressState\": \"{{AddressState_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressState Informando Valor Menor que o Esperado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressState  Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address State' must be at least 2 characters. You entered 1 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressState_Invalido\", \"S\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressState\": \"{{AddressState_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Sem email e Sem MobilePhoneNumber)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação de cadastro sem passar os campos email e MobilePhoneNumber\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"É necessário informar o campo Email ou campo MobilePhoneNumber\");\r",
											"    pm.expect(jsonData.messages[1].message).to.eql(\"É necessário informar o campo Email ou campo MobilePhoneNumber\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Sem o Campo StartDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Sem o Campo StartDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Start Date' must not be empty.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (StartDate Passado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Sem o Campo StartDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var currentDate = new Date().toLocaleDateString(\"en-US\", {timezone: \"Sao Paulo/Brazil\"});\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Start Date' must be greater than or equal to '\" + currentDate +\" 12:00:00 AM'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"startDate\": \"{{Data_Passada}}\",\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (StartDate Futuro)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"startDate\": \"{{Data_Futura}}\",\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (EndData menor que StartDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Sem o Campo StartDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'End Date' must be greater than 'Start Date'\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"startDate\": \"{{timestamp}}\",\n  \"endDate\": \"{{Data_Passada}}\",\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (BirthtDate Data Futura)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação BirthtDate Data Futura\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var currentDate = new Date().toLocaleDateString(\"en-US\", {timezone: \"Sao Paulo/Brazil\"});\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Birth Date' must be less than or equal to '\" + currentDate +\" 12:00:00 AM'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"birthDate\": \"{{Data_Futura}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (PingDate Futura)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação PingDate Data Futura\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var currentDate = new Date().toLocaleDateString(\"en-US\", {timezone: \"Sao Paulo/Brazil\"});\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Ping Date' must be less than or equal to '\" + currentDate +\" 12:00:00 AM'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"pingDate\": \"{{Data_Futura}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (PingDate Passada)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"pingDate\": \"{{Data_Passada}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (PingDate Data do dia)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"pingDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (LoginAttemptsNumber Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação LoginAttemptsNumber Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Login Attempts Number' must be less than or equal to '999999'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n  \"loginAttemptsNumber\": 9999991,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable('Id_Usuario', data.data.id);\r",
											"postman.setEnvironmentVariable('login_Usuario', data.data.login);\r",
											"postman.setEnvironmentVariable('password_Usuario', data.data.password);\r",
											"postman.setEnvironmentVariable('email_Usuario', data.data.email);\r",
											"postman.setEnvironmentVariable('cpf_Usuario', data.data.cpf);\r",
											"\r",
											"\r",
											"postman.setEnvironmentVariable('Id_permissions', data.data.permissions[0].id);\r",
											"postman.setEnvironmentVariable('typePermissionsAuthenticate', data.data.permissions[0].type);\r",
											"postman.setEnvironmentVariable('userId_permissions', data.data.permissions[0].userId);\r",
											"\r",
											"postman.setEnvironmentVariable('Id_securityKey', data.data.securityKey.id);\r",
											"postman.setEnvironmentVariable('key_securityKey', data.data.securityKey.key);\r",
											"\r",
											"postman.setEnvironmentVariable('Id_systems', data.data.systems[0].id);\r",
											"postman.setEnvironmentVariable('userId_systems', data.data.systems[0].userId);\r",
											"postman.setEnvironmentVariable('systemId_systems', data.data.systems[0].systemId);\r",
											"\r",
											"postman.setEnvironmentVariable('Id_system', data.data.systems[0].system.id);\r",
											"postman.setEnvironmentVariable('name_system', data.data.systems[0].system.name);\r",
											"postman.setEnvironmentVariable('token_system', data.data.systems[0].system.token);\r",
											"\r",
											"\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Geração de Nome/Pessoa Generico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable('Nome_Generico', data.nome);\r",
											"postman.setEnvironmentVariable('Idade_Generico', data.idade);\r",
											"postman.setEnvironmentVariable('CPF_Generico_Atualizacao', data.cpf);\r",
											"postman.setEnvironmentVariable('RG_Generico', data.rg);\r",
											"postman.setEnvironmentVariable('data_nasc_Generico', data.data_nasc);\r",
											"postman.setEnvironmentVariable('sexoGenerico', data.sexo);\r",
											"postman.setEnvironmentVariable('signo_Generico', data.signo);\r",
											"postman.setEnvironmentVariable('mae_Generico', data.mae);\r",
											"postman.setEnvironmentVariable('pai_Generico', data.pai);\r",
											"postman.setEnvironmentVariable('email_Generico', data.email);\r",
											"postman.setEnvironmentVariable('senha_Generico', data.senha);\r",
											"postman.setEnvironmentVariable('cep_Generico', data.cep);\r",
											"postman.setEnvironmentVariable('endereco_Generico', data.endereco);\r",
											"postman.setEnvironmentVariable('numero_Generico', data.numero);\r",
											"postman.setEnvironmentVariable('bairro_Generico', data.bairro);\r",
											"postman.setEnvironmentVariable('cidade_Generico', data.cidade);\r",
											"postman.setEnvironmentVariable('estado_Generico', data.estado);\r",
											"postman.setEnvironmentVariable('telefone_fixo_Generico', data.telefone_fixo);\r",
											"postman.setEnvironmentVariable('celular_Generico', data.celular);\r",
											"postman.setEnvironmentVariable('altura_Generico', data.altura);\r",
											"postman.setEnvironmentVariable('peso_Generico', data.peso);\r",
											"postman.setEnvironmentVariable('tipo_sanguineo_Generico', data.tipo_sanguineo);\r",
											"postman.setEnvironmentVariable('cor_Generico', data.cor);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "acao",
											"value": "gerar_pessoa",
											"type": "text"
										},
										{
											"key": "pontuacao",
											"value": "N",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.4devs.com.br/ferramentas_online.php",
									"protocol": "https",
									"host": [
										"www",
										"4devs",
										"com",
										"br"
									],
									"path": [
										"ferramentas_online.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Com Todos os Campos Validos)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"mobilePhoneNumber\": \"{{celular_Generico}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"cpf\": \"{{CPF_Generico_Atualizacao}}\",\n  \"name\": \"{{$Nome_Generico}}\",\n  \"lastName\": \"{{Nome_Generico}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"endDate\": null,\n  \"pingDate\": \"{{timestamp}}\",\n  \"gender\": 0,\n  \"birthDate\": \"{{Data_Passada}}\",\n  \"status\": 0,\n  \"type\": 1,\n  \"requireNewPassword\": true,\n  \"phoneNumber\": {{telefone_fixo_Generico}},\n  \"rg\": \"{{RG_Generico}}\",\n  \"addressLine\": \"Comercial\",\n  \"addressZipCode\": \"{{cep_Generico}}\",\n  \"addressNeighborhood\": \"{{bairro_Generico}}\",\n  \"addressComplement\": \"Casa\",\n  \"addressCity\": \"{{cidade_Generico}}\",\n  \"addressState\": \"{{estado_Generico}}\",\n  \"loginAttemptsNumber\": 0,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario}},\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"eph@2019\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"startDate\": \"{{timestamp}}\",\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": {{Id_systems}},\r\n        \"userId\": {{userId_systems}},\r\n        \"systemId\": {{systemId_systems}},\r\n        \"system\": {\r\n          \"id\": {{Id_system}},\r\n          \"name\": \"{{name_system}}\",\r\n          \"token\": \"{{token_system}}\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario (Dados Invalidos)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Atualização de Cadastro com Dados Invalidos\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Login' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"    pm.expect(jsonData.messages[1].message).to.eql(\"The length of 'Password' must be 50 characters or fewer. You entered 51 characters.\");\r",
											"    pm.expect(jsonData.messages[2].message).to.eql(\"The length of 'Email' must be 100 characters or fewer. You entered 108 characters.\");    \r",
											"    pm.expect(jsonData.messages[3].message).to.eql(\"CPF é inválido.\");     \r",
											"    pm.expect(jsonData.messages[4].message).to.eql(\"The length of 'Name' must be 250 characters or fewer. You entered 251 characters.\");  \r",
											"    pm.expect(jsonData.messages[5].message).to.eql(\"The length of 'Last Name' must be 250 characters or fewer. You entered 251 characters.\");  \r",
											"    pm.expect(jsonData.messages[6].message).to.eql(\"'Start Date' must not be empty.\");\r",
											"    pm.expect(jsonData.messages[7].message).to.eql(\"The length of 'RG' must be 9 characters or fewer. You entered 11 characters.\");  \r",
											"    pm.expect(jsonData.messages[8].message).to.eql(\"The length of 'Address Line' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"    pm.expect(jsonData.messages[9].message).to.eql(\"The length of 'Address Zip Code' must be 8 characters or fewer. You entered 9 characters.\");  \r",
											"    pm.expect(jsonData.messages[10].message).to.eql(\"The length of 'Address Complement' must be 150 characters or fewer. You entered 153 characters.\");  \r",
											"    pm.expect(jsonData.messages[11].message).to.eql(\"The length of 'Address City' must be 150 characters or fewer. You entered 153 characters.\");  \r",
											"    pm.expect(jsonData.messages[12].message).to.eql(\"The length of 'Address State' must be 2 characters or fewer. You entered 3 characters.\"); \r",
											"    pm.expect(jsonData.messages[13].message).to.eql(\"'Login Attempts Number' must be less than or equal to '999999'.\");                                  \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"SenhaInvalida\", \"asdfasdfs2134214@#$%asdfasdfs2134214@#$%asdfasdfsg4\");\r",
											"pm.environment.set(\"LoginInvalido\", \"asgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfaasgasfdfsadfas234124231412342@#$%¨&%asgjs\");\r",
											"pm.environment.set(\"CPF_Invalido\", \"07088154888\");\r",
											"pm.environment.set(\"Token_Invalido\", \"etgtIB0O610D57f6041A4064aC73bgrs\");\r",
											"pm.environment.set(\"EmailInvalido\", \"testetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetesteteste@teste.com.br\");\r",
											"pm.environment.set(\"NomeInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");\r",
											"pm.environment.set(\"LastNameInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");\r",
											"pm.environment.set(\"RG_Invalido\", \"123456789-0\");\r",
											"pm.environment.set(\"AddressLine_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");\r",
											"pm.environment.set(\"AddressZipCode_Invalido\", \"123456789\");\r",
											"pm.environment.set(\"AddressNeighborhood_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");\r",
											"pm.environment.set(\"AddressComplement_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");\r",
											"pm.environment.set(\"AddressCity_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");\r",
											"pm.environment.set(\"AddressState_Invalido\", \"SSP\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario}},\r\n  \"login\": \"{{LoginInvalido}}\",\r\n  \"password\": \"{{SenhaInvalida}}\",\r\n  \"email\": \"{{EmailInvalido}}\",\r\n  \"cpf\": \"{{CPF_Invalido}}\",\r\n  \"name\": \"{{NomeInvalido}}\",\r\n  \"lastName\": \"{{LastNameInvalido}}\",\r\n  \"rg\": \"{{RG_Invalido}}\",\r\n  \"addressLine\": \"{{AddressLine_Invalido}}\",\r\n  \"addressZipCode\": \"{{AddressZipCode_Invalido}}\",\r\n  \"addressNeighborhood\": \"{{AddressZipCode_Invalido}}\",\r\n  \"addressComplement\": \"{{AddressComplement_Invalido}}\",\r\n  \"addressCity\": \"{{AddressCity_Invalido}}\",\r\n  \"addressState\": \"{{AddressState_Invalido}}\",\r\n  \"loginAttemptsNumber\": 9999991,\r\n\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": 827940,\r\n        \"userId\": 828309,\r\n        \"systemId\": 3,\r\n        \"system\": {\r\n          \"id\": 3,\r\n          \"name\": \"NORDISK\",\r\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario (Usuario não Cadastrado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com Usuario não Cadastrado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"Id_Usuario_nao_Cadastrado\", \"10101010\");\r",
											"\r",
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario_nao_Cadastrado}},\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"eph@2019\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"startDate\": \"{{timestamp}}\",\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": {{Id_systems}},\r\n        \"userId\": {{userId_systems}},\r\n        \"systemId\": {{systemId_systems}},\r\n        \"system\": {\r\n          \"id\": {{Id_system}},\r\n          \"name\": \"{{name_system}}\",\r\n          \"token\": \"{{token_system}}\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inclui - Esqueceu sua Senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validação de email enviado com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.message).to.eql(\"Email enviado com sucesso.\");\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"CPF_Usuario\", \"88236064620\");\r",
											"pm.environment.set(\"email_Usuario\", \"teste@teste.com.br\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cpf\": \"{{CPF_Usuario}}\",\r\n  \"email\": \"{{email_Usuario}}\",\r\n  \"benefitId\": 43461,\r\n  \"system\": {\r\n    \"id\": 3,\r\n    \"name\": \"NORDISK\",\r\n    \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\r\n  },\r\n \"securityKey\": null,\r\n\r\n  \"message\": \"Teste email\"\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/ForgotPassword",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"ForgotPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inclui - Esqueceu sua Senha (CPF não Cadastrado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"CPF_nao_Cadastrado\", \"773996290\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cpf\": \"{{CPF_nao_Cadastrado}}\",\r\n  \"email\": \"teste@teste.com.br\",\r\n  \"benefitId\": 43461,\r\n  \"system\": {\r\n    \"id\": 576595,\r\n    \"name\": \"NORDISK\",\r\n    \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\r\n  },\r\n  \"securityKey\": {\r\n          \"id\": 0,\r\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n},\r\n  \"message\": \"Teste email\"\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/ForgotPassword",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"ForgotPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inclui - Esqueceu sua Senha (Token de Sistema Invalido)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"CPF_Usuario\", \"77399629021\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cpf\": \"{{CPF_Usuario}}\",\r\n  \"email\": \"teste@teste.com.br\",\r\n  \"benefitId\": 43461,\r\n  \"system\": {\r\n    \"id\": 576595,\r\n    \"name\": \"NORDISK\",\r\n    \"token\": \"etgtIB0O610D57f6041A4064aC73bfasd\"\r\n  },\r\n  \"securityKey\": {\r\n          \"id\": 0,\r\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n},\r\n  \"message\": \"Teste email\"\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/ForgotPassword",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"ForgotPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retorna Permissoes do Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro Previsto pelo Fato de não ser possivel passar de forma automatica a chave enviada no email ou SMS\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v1/OAuth/SecurityKeyQuery/cd0af3a4badd4d05a56a798d3d7dce49-77399629021",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v1",
										"OAuth",
										"SecurityKeyQuery",
										"cd0af3a4badd4d05a56a798d3d7dce49-77399629021"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza - Esqueceu sua Senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro Previsto pelo Fato de não ser possivel passar de forma automatica a chave enviada no email ou SMS\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"Chave de alteração de senha não enviada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"benefitId\", \"43461\");\r",
											"pm.environment.set(\"systemId\", \"576595\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"email\": \"teste@teste.com.br\",\r\n  \"benefitId\": {{benefitId}},\r\n  \"system\": {\r\n    \"id\": {{systemId}},\r\n    \"name\": \"NORDISK\",\r\n    \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\r\n  },\r\n  \"message\": \"Teste email\"\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v1/OAuth/ForgotPassword",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v1",
										"OAuth",
										"ForgotPassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserPermission",
					"item": [
						{
							"name": "Retorna Permissões do Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verificação do Valor do ResponseBody\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].type).to.eql(1);\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"userId\", \"576969\");\r",
											"pm.environment.set(\"typePermission\", \"5\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v1/UserPermission/{{userId_permissions}}/{{typePermissionsAuthenticate}}?system=-1",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v1",
										"UserPermission",
										"{{userId_permissions}}",
										"{{typePermissionsAuthenticate}}"
									],
									"query": [
										{
											"key": "system",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "OAuth",
					"item": [
						{
							"name": "Autentica Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"token\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"password\", \"aa02e422-9edd-4557-8370-7e0318af23e0\");\r",
											"pm.environment.set(\"client_id\", \"42A69F1C06B2D7B0F861B16BE9231BAA\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "username",
										"value": "{{username}}"
									},
									{
										"key": "password",
										"value": "{{password}}"
									},
									{
										"key": "client_id",
										"value": "{{client_id}}"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth/Authenticate",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth",
										"Authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Autentica Usuario (Usuario e senha não cadastrado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Autenticação com dados não Cadastrados\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql(404);\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username_nao_cadastrado\", \"aa02e422-9edd-4557-8370-7e0318af2542\");\r",
											"pm.environment.set(\"password_nao_cadastrado\", \"aa02e422-9edd-4557-8370-7e0318af2542\");\r",
											"pm.environment.set(\"client_id_nao_cadastrado\", \"42A69F1C06B2D7B0F861B16BE9231HGT\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "username",
										"value": "{{username_nao_cadastrado}}"
									},
									{
										"key": "password",
										"value": "{{password_nao_cadastrado}}"
									},
									{
										"key": "client_id",
										"value": "{{client_id_nao_cadastrado}}"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth/Authenticate",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth",
										"Authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Geração de CPF Generico Valido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var CPF = responseBody.toString();\r",
											"pm.environment.set('CPF_Generico', CPF);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "acao",
										"value": "pontuacao",
										"type": "text"
									},
									{
										"key": "pontuacao",
										"value": "N",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "acao",
											"value": "gerar_pessoa",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										},
										{
											"key": "acao",
											"value": "gerar_cpf",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.4devs.com.br/ferramentas_online.php",
									"protocol": "https",
									"host": [
										"www",
										"4devs",
										"com",
										"br"
									],
									"path": [
										"ferramentas_online.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Senha Ultrapassando Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Senha Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Password' must be 50 characters or fewer. You entered 51 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"SenhaInvalida\", \"asdfasdfs2134214@#$%asdfasdfs2134214@#$%asdfasdfsg4\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"{{SenhaInvalida}}\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Login Ultrapassando Limite do campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Login Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Login' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"LoginInvalido\", \"asgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfaasgasfdfsadfas234124231412342@#$%¨&%asgjs\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{LoginInvalido}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Sem Autenticação)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Criação de Usuario sem Autenticação\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (CPF Invalido)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"CPF é inválido.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"CPF_Invalido\", \"07088154888\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Invalido}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Token de Sistema Invalido)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"Token_Invalido\", \"etgtIB0O610D57f6041A4064aC73bgrs\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"{{Token_Invalido}}\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Email Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Email Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Email' must be 100 characters or fewer. You entered 108 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"EmailInvalido\", \"testetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetesteteste@teste.com.br\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"{{EmailInvalido}}\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Nome Ultrapassando o Limite do campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Nome Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Name' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"NomeInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{NomeInvalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (lastName Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Last Name Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Last Name' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"LastNameInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"lastName\": \"{{LastNameInvalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (RG Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação RG Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'RG' must be 9 characters or fewer. You entered 11 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"RG_Invalido\", \"123456789-0\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"rg\": \"{{RG_Invalido}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressLine Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressLine Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Line' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressLine_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressLine\": \"{{AddressLine_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressZipCode Ultrapassando Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressZipCode Ultrapassando Limite do campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Zip Code' must be 8 characters or fewer. You entered 9 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressZipCode_Invalido\", \"123456789\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"addressZipCode\": \"{{AddressZipCode_Invalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressZipCode Valor Menor que o Esperado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressZipCode Valor Menor que o Esperado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Zip Code' must be at least 8 characters. You entered 7 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressZipCode_Invalido\", \"1234567\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"addressZipCode\": \"{{AddressZipCode_Invalido}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressNeighborhood Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressNeighborhood Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Neighborhood' must be 150 characters or fewer. You entered 153 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressNeighborhood_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressNeighborhood\": \"{{AddressNeighborhood_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressComplement Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressComplement Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address Complement' must be 150 characters or fewer. You entered 153 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressComplement_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressComplement\": \"{{AddressComplement_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressCity Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressCity Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address City' must be 150 characters or fewer. You entered 153 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressCity_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressCity\": \"{{AddressCity_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressState Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressState  Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address State' must be 2 characters or fewer. You entered 3 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressState_Invalido\", \"SSP\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressState\": \"{{AddressState_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (AddressState Informando Valor Menor que o Esperado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação AddressState  Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Address State' must be at least 2 characters. You entered 1 characters.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));\r",
											"\r",
											"pm.environment.set(\"AddressState_Invalido\", \"S\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"addressState\": \"{{AddressState_Invalido}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Sem email e Sem MobilePhoneNumber)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação de cadastro sem passar os campos email e MobilePhoneNumber\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"É necessário informar o campo Email ou campo MobilePhoneNumber\");\r",
											"    pm.expect(jsonData.messages[1].message).to.eql(\"É necessário informar o campo Email ou campo MobilePhoneNumber\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Sem o Campo StartDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Sem o Campo StartDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Start Date' must not be empty.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (StartDate Passado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Sem o Campo StartDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var currentDate = new Date().toLocaleDateString(\"en-US\", {timezone: \"Sao Paulo/Brazil\"});\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Start Date' must be greater than or equal to '\" + currentDate +\" 12:00:00 AM'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"startDate\": \"{{Data_Passada}}\",\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (StartDate Futuro)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"startDate\": \"{{Data_Futura}}\",\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (EndData menor que StartDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Sem o Campo StartDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'End Date' must be greater than 'Start Date'\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"startDate\": \"{{timestamp}}\",\n  \"endDate\": \"{{Data_Passada}}\",\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (BirthtDate Data Futura)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação BirthtDate Data Futura\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var currentDate = new Date().toLocaleDateString(\"en-US\", {timezone: \"Sao Paulo/Brazil\"});\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Birth Date' must be less than or equal to '\" + currentDate +\" 12:00:00 AM'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"birthDate\": \"{{Data_Futura}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (PingDate Futura)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação PingDate Data Futura\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var currentDate = new Date().toLocaleDateString(\"en-US\", {timezone: \"Sao Paulo/Brazil\"});\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Ping Date' must be less than or equal to '\" + currentDate +\" 12:00:00 AM'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"pingDate\": \"{{Data_Futura}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (PingDate Passada)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"pingDate\": \"{{Data_Passada}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (PingDate Data do dia)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"pingDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (LoginAttemptsNumber Ultrapassando o Limite do Campo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação LoginAttemptsNumber Ultrapassando o Limite do Campo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"'Login Attempts Number' must be less than or equal to '999999'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n  \"loginAttemptsNumber\": 9999991,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable('Id_Usuario', data.data.id);\r",
											"postman.setEnvironmentVariable('Id_permissions', data.data.permissions[0].id);\r",
											"postman.setEnvironmentVariable('userId_permissions', data.data.permissions[0].userId);\r",
											"postman.setEnvironmentVariable('Id_securityKey', data.data.securityKey.id);\r",
											"postman.setEnvironmentVariable('key_securityKey', data.data.securityKey.key);\r",
											"\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment'); \r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY/MM/DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"email\": \"teste@teste.com.br\",\n  \"mobilePhoneNumber\": \"11967556641\",\n  \"phoneNumber\": 11967556641,\n  \"cpf\": \"{{CPF_Generico}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"status\": 0,\n  \"type\": 1,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Geração de Nome/Pessoa Generico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable('Nome_Generico', data.nome);\r",
											"postman.setEnvironmentVariable('Idade_Generico', data.idade);\r",
											"postman.setEnvironmentVariable('CPF_Generico_atualizacao', data.cpf);\r",
											"postman.setEnvironmentVariable('RG_Generico', data.rg);\r",
											"postman.setEnvironmentVariable('data_nasc_Generico', data.data_nasc);\r",
											"postman.setEnvironmentVariable('sexoGenerico', data.sexo);\r",
											"postman.setEnvironmentVariable('signo_Generico', data.signo);\r",
											"postman.setEnvironmentVariable('mae_Generico', data.mae);\r",
											"postman.setEnvironmentVariable('pai_Generico', data.pai);\r",
											"postman.setEnvironmentVariable('email_Generico', data.email);\r",
											"postman.setEnvironmentVariable('senha_Generico', data.senha);\r",
											"postman.setEnvironmentVariable('cep_Generico', data.cep);\r",
											"postman.setEnvironmentVariable('endereco_Generico', data.endereco);\r",
											"postman.setEnvironmentVariable('numero_Generico', data.numero);\r",
											"postman.setEnvironmentVariable('bairro_Generico', data.bairro);\r",
											"postman.setEnvironmentVariable('cidade_Generico', data.cidade);\r",
											"postman.setEnvironmentVariable('estado_Generico', data.estado);\r",
											"postman.setEnvironmentVariable('telefone_fixo_Generico', data.telefone_fixo);\r",
											"postman.setEnvironmentVariable('celular_Generico', data.celular);\r",
											"postman.setEnvironmentVariable('altura_Generico', data.altura);\r",
											"postman.setEnvironmentVariable('peso_Generico', data.peso);\r",
											"postman.setEnvironmentVariable('tipo_sanguineo_Generico', data.tipo_sanguineo);\r",
											"postman.setEnvironmentVariable('cor_Generico', data.cor);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "acao",
											"value": "gerar_pessoa",
											"type": "text"
										},
										{
											"key": "pontuacao",
											"value": "N",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.4devs.com.br/ferramentas_online.php",
									"protocol": "https",
									"host": [
										"www",
										"4devs",
										"com",
										"br"
									],
									"path": [
										"ferramentas_online.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cria Usuario (Com Todos os Campos Validos)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Data de Momento, Data Futura e Data Passada\r",
											"const moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Futura\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"Data_Passada\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{$randomUserName}}\",\n  \"password\": \"eph@2019\",\n  \"mobilePhoneNumber\": \"{{celular_Generico}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"cpf\": \"{{CPF_Generico_atualizacao}}\",\n  \"name\": \"{{$Nome_Generico}}\",\n  \"lastName\": \"{{Nome_Generico}}\",\n  \"startDate\": \"{{timestamp}}\",\n  \"endDate\": null,\n  \"pingDate\": \"{{timestamp}}\",\n  \"gender\": 0,\n  \"birthDate\": \"{{Data_Passada}}\",\n  \"status\": 0,\n  \"type\": 1,\n  \"requireNewPassword\": true,\n  \"phoneNumber\": {{telefone_fixo_Generico}},\n  \"rg\": \"{{RG_Generico}}\",\n  \"addressLine\": \"Comercial\",\n  \"addressZipCode\": \"{{cep_Generico}}\",\n  \"addressNeighborhood\": \"{{bairro_Generico}}\",\n  \"addressComplement\": \"Casa\",\n  \"addressCity\": \"{{cidade_Generico}}\",\n  \"addressState\": \"{{estado_Generico}}\",\n  \"loginAttemptsNumber\": 0,\n \"systems\": [\n      {\n        \"id\": 0,\n        \"userId\": 0,\n        \"systemId\": 3,\n        \"system\": {\n          \"id\": 3,\n          \"name\": \"NORDISK\",\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\n        }\n      }\n    ],\n     \"permissions\": [\n          {\n            \"id\": 0,\n            \"userId\": 0,\n            \"type\": 1,\n            \"identifier\": 0\n          }\n        ],\n        \"securityKey\": {\n          \"id\": 0,\n          \"key\": \"faae23bf921941b8b05f97a53ca69286-77399\",\n          \"userId\": 0,\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\n}\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"pm.environment.set('login', data.data.login);\r",
											"pm.environment.set('systemID', data.data.systems[0].system.token);\r",
											"\r",
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario}},\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"eph@2019\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"mobilePhoneNumber\": \"11967556641\",\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"startDate\": \"{{timestamp}}\",\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": {{Id_systems}},\r\n        \"userId\": {{userId_systems}},\r\n        \"systemId\": {{systemId_systems}},\r\n        \"system\": {\r\n          \"id\": {{Id_system}},\r\n          \"name\": \"{{name_system}}\",\r\n          \"token\": \"{{token_system}}\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario (Dados Invalidos)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validação Atualização de Cadastro com Dados Invalidos\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages[0].message).to.eql(\"The length of 'Login' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"    pm.expect(jsonData.messages[1].message).to.eql(\"The length of 'Password' must be 50 characters or fewer. You entered 51 characters.\");\r",
											"    pm.expect(jsonData.messages[2].message).to.eql(\"The length of 'Email' must be 100 characters or fewer. You entered 108 characters.\");    \r",
											"    pm.expect(jsonData.messages[3].message).to.eql(\"CPF é inválido.\");     \r",
											"    pm.expect(jsonData.messages[4].message).to.eql(\"The length of 'Name' must be 250 characters or fewer. You entered 251 characters.\");  \r",
											"    pm.expect(jsonData.messages[5].message).to.eql(\"The length of 'Last Name' must be 250 characters or fewer. You entered 251 characters.\");  \r",
											"    pm.expect(jsonData.messages[6].message).to.eql(\"'Start Date' must not be empty.\");\r",
											"    pm.expect(jsonData.messages[7].message).to.eql(\"The length of 'RG' must be 9 characters or fewer. You entered 11 characters.\");  \r",
											"    pm.expect(jsonData.messages[8].message).to.eql(\"The length of 'Address Line' must be 250 characters or fewer. You entered 251 characters.\");\r",
											"    pm.expect(jsonData.messages[9].message).to.eql(\"The length of 'Address Zip Code' must be 8 characters or fewer. You entered 9 characters.\");  \r",
											"    pm.expect(jsonData.messages[10].message).to.eql(\"The length of 'Address Complement' must be 150 characters or fewer. You entered 153 characters.\");  \r",
											"    pm.expect(jsonData.messages[11].message).to.eql(\"The length of 'Address City' must be 150 characters or fewer. You entered 153 characters.\");  \r",
											"    pm.expect(jsonData.messages[12].message).to.eql(\"The length of 'Address State' must be 2 characters or fewer. You entered 3 characters.\"); \r",
											"    pm.expect(jsonData.messages[13].message).to.eql(\"'Login Attempts Number' must be less than or equal to '999999'.\");                                  \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"SenhaInvalida\", \"asdfasdfs2134214@#$%asdfasdfs2134214@#$%asdfasdfsg4\");\r",
											"pm.environment.set(\"LoginInvalido\", \"asgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfasdfsadfsfdasgasfdfsadfas234124231412342@#$%¨&%asgfsadfaasgasfdfsadfas234124231412342@#$%¨&%asgjs\");\r",
											"pm.environment.set(\"CPF_Invalido\", \"07088154888\");\r",
											"pm.environment.set(\"Token_Invalido\", \"etgtIB0O610D57f6041A4064aC73bgrs\");\r",
											"pm.environment.set(\"EmailInvalido\", \"testetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetestetesteteste@teste.com.br\");\r",
											"pm.environment.set(\"NomeInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");\r",
											"pm.environment.set(\"LastNameInvalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");\r",
											"pm.environment.set(\"RG_Invalido\", \"123456789-0\");\r",
											"pm.environment.set(\"AddressLine_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesfff\");\r",
											"pm.environment.set(\"AddressZipCode_Invalido\", \"123456789\");\r",
											"pm.environment.set(\"AddressNeighborhood_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");\r",
											"pm.environment.set(\"AddressComplement_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");\r",
											"pm.environment.set(\"AddressCity_Invalido\", \"TesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTesteTes\");\r",
											"pm.environment.set(\"AddressState_Invalido\", \"SSP\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario}},\r\n  \"login\": \"{{LoginInvalido}}\",\r\n  \"password\": \"{{SenhaInvalida}}\",\r\n  \"email\": \"{{EmailInvalido}}\",\r\n  \"cpf\": \"{{CPF_Invalido}}\",\r\n  \"name\": \"{{NomeInvalido}}\",\r\n  \"lastName\": \"{{LastNameInvalido}}\",\r\n  \"rg\": \"{{RG_Invalido}}\",\r\n  \"addressLine\": \"{{AddressLine_Invalido}}\",\r\n  \"addressZipCode\": \"{{AddressZipCode_Invalido}}\",\r\n  \"addressNeighborhood\": \"{{AddressZipCode_Invalido}}\",\r\n  \"addressComplement\": \"{{AddressComplement_Invalido}}\",\r\n  \"addressCity\": \"{{AddressCity_Invalido}}\",\r\n  \"addressState\": \"{{AddressState_Invalido}}\",\r\n  \"loginAttemptsNumber\": 9999991,\r\n\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": 827940,\r\n        \"userId\": 828309,\r\n        \"systemId\": 3,\r\n        \"system\": {\r\n          \"id\": 3,\r\n          \"name\": \"NORDISK\",\r\n          \"token\": \"etgtIB0O610D57f6041A4064aC73baED\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza Usuario (Usuario não Cadastrado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Teste de Retorno Status da API\r",
											"pm.test(\"StatusComunicação API\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro de Usuario com CPF Invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"Id_Usuario_nao_Cadastrado\", \"10101010\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{Id_Usuario_nao_Cadastrado}},\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"eph@2019\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"mobilePhoneNumber\": \"11967556641\",\r\n  \"cpf\": \"{{CPF_Generico}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"startDate\": \"{{timestamp}}\",\r\n  \"status\": 0,\r\n  \"type\": 1,\r\n \"systems\": [\r\n      {\r\n        \"id\": {{Id_systems}},\r\n        \"userId\": {{userId_systems}},\r\n        \"systemId\": {{systemId_systems}},\r\n        \"system\": {\r\n          \"id\": {{Id_system}},\r\n          \"name\": \"{{name_system}}\",\r\n          \"token\": \"{{token_system}}\"\r\n        }\r\n      }\r\n    ],\r\n    \"permissions\": [\r\n          {\r\n            \"id\": {{Id_permissions}},\r\n            \"userId\": {{userId_permissions}},\r\n            \"type\": 1,\r\n            \"identifier\": 0\r\n          }\r\n        ],\r\n        \"securityKey\": {\r\n          \"id\": {{Id_securityKey}},\r\n          \"key\": \"{{key_securityKey}}\",\r\n          \"userId\": 0,\r\n          \"dateGeneration\": \"2021-02-11T18:56:11.482Z\",\r\n          \"dateExpiration\": \"2022-02-11T18:56:11.482Z\"\r\n}\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/Authentication/api/v2/OAuth",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"Authentication",
										"api",
										"v2",
										"OAuth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resete de Token por email ou SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificação do Valor do ResponseBody\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.messages).to.eql(null);\r",
											"    pm.expect(jsonData.error).to.eql(null);\r",
											"    pm.expect(jsonData.data).to.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/OAuth/Password/{{systemID}}/{{login}}/RequestResetToken/1",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"OAuth",
										"Password",
										"{{systemID}}",
										"{{login}}",
										"RequestResetToken",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualiza senha Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Erro Previsto pelo Fato de não ser possivel passar de forma automatica a chave enviada no email ou SMS\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Informação não encontrada\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"systemId\": \"{{systemID}}\",\r\n  \"login\": \"{{login}}\",\r\n  \"securityKey\": \"59TTun\",\r\n  \"password\": \"eph@2019\"\r\n}"
								},
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/OAuth/Password",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"OAuth",
										"Password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detalhes do Contato do Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"userId\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/OAuth/ContactDetails/{{systemID}}/{{login}}",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"OAuth",
										"ContactDetails",
										"{{systemID}}",
										"{{login}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Retorna Dados do Usuario pelo Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ID\", \"1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/User/GetById/{{ID}}",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"User",
										"GetById",
										"{{ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retorna Dados do Usuario (Read)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ID\", \"1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/User/Read?gridParams={\"Page\":1,\"ItemsPerPage\":10,\"Filter\":[],\"Sorter\":[]}&userId=14816&format=3&filename=\"Bradesco\"&delimiter=;",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"User",
										"Read"
									],
									"query": [
										{
											"key": "gridParams",
											"value": "{\"Page\":1,\"ItemsPerPage\":10,\"Filter\":[],\"Sorter\":[]}"
										},
										{
											"key": "userId",
											"value": "14816"
										},
										{
											"key": "format",
											"value": "3"
										},
										{
											"key": "filename",
											"value": "\"Bradesco\""
										},
										{
											"key": "delimiter",
											"value": ";"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UserPermission",
					"item": [
						{
							"name": "Retorna Permissoes do Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// teste que verifica se no corpo da resposta existe a palavra chave “Palavra Chave”\r",
											"pm.test(\"ContainsCorpoBody\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"//Variavel para validar o  responseBody da API\r",
											"var body = responseBody  &&  JSON.parse(responseBody.toLocaleLowerCase());\r",
											" \r",
											"//Teste de Retorno Tipo de Erro + Retorno das Msg de Erro\r",
											"if (body.success != null){\r",
											"    var msg = ( body.success === true) ? 'RetornoSucessoOuErroBody' : body.error.code + ' - ' + body.error.message;\r",
											"if(body.messages !=null){body.messages.forEach((data, index)=>{tests[data.message]= body.success \r",
											"===true;});}\r",
											"tests[msg] =  body.success === true;    \r",
											"};\r",
											"\r",
											"//teste que verifica se os valores da chaves zipCode são 06160180\r",
											"pm.test(\"Verificação do Valor do ResponseBodyErrorNull\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Authenticate}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Authenticate}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{LinkAmbiente}}/authentication/api/v2/UserPermission/{{userId_permissions}}/{{typePermissionsAuthenticate}}?system=-1",
									"host": [
										"{{LinkAmbiente}}"
									],
									"path": [
										"authentication",
										"api",
										"v2",
										"UserPermission",
										"{{userId_permissions}}",
										"{{typePermissionsAuthenticate}}"
									],
									"query": [
										{
											"key": "system",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"username\", \"177d932a-60fd-4ac5-adbc-90d9c39f22a4\");",
					"pm.environment.set(\"password\", \"177d932a-60fd-4ac5-adbc-90d9c39f22a4\");",
					"pm.environment.set(\"client_id\", \"etgtIB0O610D57f6041A4064aC73baED\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Teste Tempo de Resposta",
					"pm.test(\"Tempo de resposta aceitavel\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000000);",
					"});",
					""
				]
			}
		}
	]
}